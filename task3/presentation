	.EQU	LED_PIN1, 0      @ GPIO 0
	.EQU	LED_PIN2, 1      @ GPIO 1
	.EQU	LED_PIN3, 2      @ GPIO 2
	.EQU	GPIO_OUT, 1      @ anger att pinnen ska vara utgång
	.EQU	sleep_time, 1000  @ 1000 ms (1 sekund)

EQU betyder att vi definierar en konstant (ungefär som #define i C).
Vi säger att våra tre LEDs sitter på GPIO 0, 1 och 2.
GPIO_OUT = 1 betyder att pinnen ska fungera som utgång (output).
sleep_time = 1000 används för att vänta 1 sekund mellan varje steg i mönstret.


	.thumb_func
	.global main

thumb_func anger att funktionen använder Thumb-instruktionssetet, vilket krävs av Pico SDK.
global main gör att funktionen main blir synlig för C-program eller SDK — det här är alltså vårt startställe.


	MOV	R0, #LED_PIN1
	BL	gpio_init
	MOV	R0, #LED_PIN1	
	MOV	R1, #GPIO_OUT	
	BL	link_gpio_set_dir

Laddar pinnens nummer i register R0
Anropar gpio_init (en C-funktion i Pico SDK) för att aktivera pinnen
Sätter pinnen som utgång med link_gpio_set_dir
Samma kod upprepas för LED_PIN2 och LED_PIN3.


	MOV R7, #0   @ counter = 0
	MOV R6, #0   @ direction = 0 (0 = uppåt, 1 = nedåt)

R7 används som räknare som representerar vilket mönster av lysdioder som är på.
Varje bit i R7 motsvarar en LED:
bit 0 → LED1
bit 1 → LED2
bit 2 → LED3

R6 håller riktningen:
0 = vi räknar upp (ljuset går åt höger)
1 = vi räknar ner (ljuset går åt vänster)


loop:
	MOV R3, #7 
	AND R7, R7, R3  @ begränsar R7 till 3 bitar (0–7)



